CREATE OR REPLACE DISTRIBUTED QUERY bi3(STRING tagClass, STRING country) SYNTAX v2 {
  TYPEDEF TUPLE <UINT forumId, STRING forumTitle, STRING forumCreationDate, UINT personId, UINT messageCount> RESULT;
  HeapAccum<RESULT>(20, messageCount DESC, forumId ASC) @@result;
  SumAccum<UINT> @messageCount;
  MinAccum<UINT> @personId;
  OrAccum <BOOL> @selected;
  
  //remove the two accums here and propogate it to the last query here so that the linear cost opt will be able to break it
  /*
  forums =
    SELECT f
    FROM Country:cn -(<IS_PART_OF.<IS_LOCATED_IN)- Person:p -(<HAS_MODERATOR)- Forum:f
    WHERE cn.name == country
    ACCUM f.@personId = p.id, f.@selected += true;
    */
    /*
  messages =
    SELECT m
    FROM TagClass:t -(<HAS_TYPE.<HAS_TAG)- (Comment|Post):m
    WHERE t.name == tagClass;
    */
  tmp =
    SELECT f
    FROM  TagClass:t -(<HAS_TYPE.<HAS_TAG)- (Comment|Post):m -(ROOT_FORUM>)- Forum:f - (HAS_MODERATOR>) - Person:p - (IS_LOCATED_IN>.IS_PART_OF>) - Country:cn
    WHERE cn.name == country and
    t.name == tagClass
    PER(m,f) // Since each message finally replies to one Post, this PER does not change results but improve performance.
    ACCUM f.@messageCount += 1
    POST-ACCUM @@result += RESULT(f.id, f.title, ms_to_string(f.creationDate), p.id, f.@messageCount);

  PRINT @@result as result;
}
