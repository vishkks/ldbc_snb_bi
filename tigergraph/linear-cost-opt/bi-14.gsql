CREATE OR REPLACE DISTRIBUTED QUERY bi14(STRING country1, STRING country2) SYNTAX v2 {
  TYPEDEF TUPLE<UINT person1Id, UINT person2Id, STRING city1Name, INT score> pairScore;
  TYPEDEF TUPLE <UINT pid, UINT score> ps;

  HeapAccum<ps>(1, score DESC, pid ASC) @pScore;
  MapAccum<VERTEX<Person>, UINT> @score;
  MinAccum<VERTEX<Person>> @person2;
  SetAccum<VERTEX<Person>> @knows, @p2s1, @p2s2, @p2s3, @p2s4;
  OrAccum @valid, @selected;
  HeapAccum<pairScore>(1, score DESC, person1Id ASC, person2Id ASC) @cityresults, @@result;
  MinAccum<UINT> @min_pid2;
  
  P1candidate = SELECT p 
    FROM Country:cn -(<IS_PART_OF.<IS_LOCATED_IN)-Person:p 
    WHERE cn.name == country1;

  P2candidate = 
    SELECT p2
    FROM Country:cn -(<IS_PART_OF.<IS_LOCATED_IN)-Person:p2
    WHERE cn.name == country2
    ACCUM p2.@selected += true;
  
  P2 = 
    SELECT p2
    FROM P1candidate:p1 -(KNOWS)- Person:p2
    WHERE p2.@selected
    ACCUM p1.@valid += True, 
      p1.@knows += p2,
      p1.@min_pid2 += p2.id;

  P1 = SELECT p FROM Person:p WHERE p.@valid;
  M1 = SELECT m FROM P1:p1 -(<HAS_CREATOR)- (Comment|Post):m
    ACCUM m.@valid += true;
  # Case 1, 2 and 4
  # propagate person2 vertex id to P1
  M2 = SELECT m2 FROM P2:p -(<HAS_CREATOR)- (Comment|Post):m2
    ACCUM m2.@person2 += p;
  tmp = SELECT m1 FROM M2:m2 -(<REPLY_OF)- Comment:m1
    WHERE m1.@valid
    ACCUM m1.@person2 += m2.@person2; // we use m1.@person2 here because each Comment reply to one message
  tmp = SELECT m1 FROM M2:m2 -(REPLY_OF>)- _:m1
    WHERE m1.@valid
    ACCUM m1.@p2s2 += m2.@person2;
  tmp = SELECT m1 FROM P2:p2 -(LIKES>)- _:m1
    WHERE m1.@valid
    ACCUM m1.@p2s4 += p2;

  tmp = SELECT p1 FROM P1:p1 -(<HAS_CREATOR)- (Comment|Post):m1
    ACCUM IF m1.type == "Comment" THEN p1.@p2s1 += m1.@person2 END,
      p1.@p2s2 += m1.@p2s2,
      p1.@p2s4 += m1.@p2s4
    POST-ACCUM 
      p1.@p2s1 = (p1.@p2s1 INTERSECT p1.@knows),
      p1.@p2s2 = (p1.@p2s2 INTERSECT p1.@knows),
      p1.@p2s4 = (p1.@p2s4 INTERSECT p1.@knows);

  # Case 3
  tmp = SELECT p1 FROM M2:m2 -(<LIKES)- Person:p1
    WHERE p1.@valid
    ACCUM p1.@p2s3 += m2.@person2
    POST-ACCUM p1.@p2s3 = (p1.@p2s3 INTERSECT p1.@knows);

  P1 = SELECT p1 FROM P1:p1
    ACCUM
      FOREACH p2 IN p1.@p2s1 DO
        p1.@score += (p2 -> 4)
      END,
      FOREACH p2 IN p1.@p2s2 DO
        p1.@score += (p2 -> 1)
      END,
      FOREACH p2 IN p1.@p2s3 DO
        p1.@score += (p2 -> 10)
      END,
      FOREACH p2 IN p1.@p2s4 DO
        p1.@score += (p2 -> 1)
      END
    POST-ACCUM
      FOREACH (p2,score) IN p1.@score DO
        p1.@pScore += ps(p2.id,score)
      END;

  City1 = SELECT c1 FROM P1:p1 -(IS_LOCATED_IN>)- City:c1
    ACCUM 
      IF p1.@pScore.size() > 0 THEN
        c1.@cityresults += pairScore(p1.id, p1.@pScore.top().pid, c1.name, p1.@pScore.top().score)
      ELSE
        c1.@cityresults += pairScore(p1.id, p1.@min_pid2, c1.name, 0)
      END; 
  
  @@result.resize(City1.size());
  City1 = SELECT c1 FROM City1:c1
    ACCUM @@result += c1.@cityresults.top();
  PRINT @@result as result;
}